/* eslint-disable */
import { Timestamp } from "@yandex-cloud/core/dist/generated/google/protobuf/timestamp";
import Long from "long";
import _m0 from "protobufjs/minimal";
import { messageTypeRegistry } from "../../../../typeRegistry";

export const protobufPackage = "yandex.cloud.vpc.v1";

export interface SecurityGroup {
  $type: "yandex.cloud.vpc.v1.SecurityGroup";
  id: string;
  folderId: string;
  createdAt?: Date | undefined;
  name: string;
  description: string;
  labels: { [key: string]: string };
  networkId: string;
  status: SecurityGroup_Status;
  rules: SecurityGroupRule[];
  defaultForNetwork: boolean;
}

export enum SecurityGroup_Status {
  STATUS_UNSPECIFIED = 0,
  CREATING = 1,
  ACTIVE = 2,
  /** UPDATING - updating is a long operation because we must update all instances in SG */
  UPDATING = 3,
  DELETING = 4,
  UNRECOGNIZED = -1,
}

export function securityGroup_StatusFromJSON(object: any): SecurityGroup_Status {
  switch (object) {
    case 0:
    case "STATUS_UNSPECIFIED":
      return SecurityGroup_Status.STATUS_UNSPECIFIED;
    case 1:
    case "CREATING":
      return SecurityGroup_Status.CREATING;
    case 2:
    case "ACTIVE":
      return SecurityGroup_Status.ACTIVE;
    case 3:
    case "UPDATING":
      return SecurityGroup_Status.UPDATING;
    case 4:
    case "DELETING":
      return SecurityGroup_Status.DELETING;
    case -1:
    case "UNRECOGNIZED":
    default:
      return SecurityGroup_Status.UNRECOGNIZED;
  }
}

export function securityGroup_StatusToJSON(object: SecurityGroup_Status): string {
  switch (object) {
    case SecurityGroup_Status.STATUS_UNSPECIFIED:
      return "STATUS_UNSPECIFIED";
    case SecurityGroup_Status.CREATING:
      return "CREATING";
    case SecurityGroup_Status.ACTIVE:
      return "ACTIVE";
    case SecurityGroup_Status.UPDATING:
      return "UPDATING";
    case SecurityGroup_Status.DELETING:
      return "DELETING";
    case SecurityGroup_Status.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface SecurityGroup_LabelsEntry {
  $type: "yandex.cloud.vpc.v1.SecurityGroup.LabelsEntry";
  key: string;
  value: string;
}

export interface SecurityGroupRule {
  $type: "yandex.cloud.vpc.v1.SecurityGroupRule";
  /** generated by api server after rule creation */
  id: string;
  description: string;
  labels: { [key: string]: string };
  direction: SecurityGroupRule_Direction;
  /** null value means any */
  ports?:
    | PortRange
    | undefined;
  /**
   * null value means any protocol
   * values from https://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml
   */
  protocolName: string;
  protocolNumber: number;
  cidrBlocks?: CidrBlocks | undefined;
  securityGroupId?: string | undefined;
  predefinedTarget?: string | undefined;
}

export enum SecurityGroupRule_Direction {
  DIRECTION_UNSPECIFIED = 0,
  INGRESS = 1,
  EGRESS = 2,
  UNRECOGNIZED = -1,
}

export function securityGroupRule_DirectionFromJSON(object: any): SecurityGroupRule_Direction {
  switch (object) {
    case 0:
    case "DIRECTION_UNSPECIFIED":
      return SecurityGroupRule_Direction.DIRECTION_UNSPECIFIED;
    case 1:
    case "INGRESS":
      return SecurityGroupRule_Direction.INGRESS;
    case 2:
    case "EGRESS":
      return SecurityGroupRule_Direction.EGRESS;
    case -1:
    case "UNRECOGNIZED":
    default:
      return SecurityGroupRule_Direction.UNRECOGNIZED;
  }
}

export function securityGroupRule_DirectionToJSON(object: SecurityGroupRule_Direction): string {
  switch (object) {
    case SecurityGroupRule_Direction.DIRECTION_UNSPECIFIED:
      return "DIRECTION_UNSPECIFIED";
    case SecurityGroupRule_Direction.INGRESS:
      return "INGRESS";
    case SecurityGroupRule_Direction.EGRESS:
      return "EGRESS";
    case SecurityGroupRule_Direction.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface SecurityGroupRule_LabelsEntry {
  $type: "yandex.cloud.vpc.v1.SecurityGroupRule.LabelsEntry";
  key: string;
  value: string;
}

export interface PortRange {
  $type: "yandex.cloud.vpc.v1.PortRange";
  fromPort: number;
  toPort: number;
}

export interface CidrBlocks {
  $type: "yandex.cloud.vpc.v1.CidrBlocks";
  v4CidrBlocks: string[];
  v6CidrBlocks: string[];
}

function createBaseSecurityGroup(): SecurityGroup {
  return {
    $type: "yandex.cloud.vpc.v1.SecurityGroup",
    id: "",
    folderId: "",
    createdAt: undefined,
    name: "",
    description: "",
    labels: {},
    networkId: "",
    status: 0,
    rules: [],
    defaultForNetwork: false,
  };
}

export const SecurityGroup = {
  $type: "yandex.cloud.vpc.v1.SecurityGroup" as const,

  encode(message: SecurityGroup, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.folderId !== "") {
      writer.uint32(18).string(message.folderId);
    }
    if (message.createdAt !== undefined) {
      Timestamp.encode(toTimestamp(message.createdAt), writer.uint32(26).fork()).ldelim();
    }
    if (message.name !== "") {
      writer.uint32(34).string(message.name);
    }
    if (message.description !== "") {
      writer.uint32(42).string(message.description);
    }
    Object.entries(message.labels).forEach(([key, value]) => {
      SecurityGroup_LabelsEntry.encode({
        $type: "yandex.cloud.vpc.v1.SecurityGroup.LabelsEntry",
        key: key as any,
        value,
      }, writer.uint32(50).fork()).ldelim();
    });
    if (message.networkId !== "") {
      writer.uint32(58).string(message.networkId);
    }
    if (message.status !== 0) {
      writer.uint32(64).int32(message.status);
    }
    for (const v of message.rules) {
      SecurityGroupRule.encode(v!, writer.uint32(74).fork()).ldelim();
    }
    if (message.defaultForNetwork === true) {
      writer.uint32(80).bool(message.defaultForNetwork);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SecurityGroup {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSecurityGroup();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.folderId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.createdAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.name = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.description = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          const entry6 = SecurityGroup_LabelsEntry.decode(reader, reader.uint32());
          if (entry6.value !== undefined) {
            message.labels[entry6.key] = entry6.value;
          }
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.networkId = reader.string();
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.rules.push(SecurityGroupRule.decode(reader, reader.uint32()));
          continue;
        case 10:
          if (tag !== 80) {
            break;
          }

          message.defaultForNetwork = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SecurityGroup {
    return {
      $type: SecurityGroup.$type,
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      folderId: isSet(object.folderId) ? globalThis.String(object.folderId) : "",
      createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      labels: isObject(object.labels)
        ? Object.entries(object.labels).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      networkId: isSet(object.networkId) ? globalThis.String(object.networkId) : "",
      status: isSet(object.status) ? securityGroup_StatusFromJSON(object.status) : 0,
      rules: globalThis.Array.isArray(object?.rules) ? object.rules.map((e: any) => SecurityGroupRule.fromJSON(e)) : [],
      defaultForNetwork: isSet(object.defaultForNetwork) ? globalThis.Boolean(object.defaultForNetwork) : false,
    };
  },

  toJSON(message: SecurityGroup): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.folderId !== "") {
      obj.folderId = message.folderId;
    }
    if (message.createdAt !== undefined) {
      obj.createdAt = message.createdAt.toISOString();
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.labels) {
      const entries = Object.entries(message.labels);
      if (entries.length > 0) {
        obj.labels = {};
        entries.forEach(([k, v]) => {
          obj.labels[k] = v;
        });
      }
    }
    if (message.networkId !== "") {
      obj.networkId = message.networkId;
    }
    if (message.status !== 0) {
      obj.status = securityGroup_StatusToJSON(message.status);
    }
    if (message.rules?.length) {
      obj.rules = message.rules.map((e) => SecurityGroupRule.toJSON(e));
    }
    if (message.defaultForNetwork === true) {
      obj.defaultForNetwork = message.defaultForNetwork;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SecurityGroup>, I>>(base?: I): SecurityGroup {
    return SecurityGroup.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SecurityGroup>, I>>(object: I): SecurityGroup {
    const message = createBaseSecurityGroup();
    message.id = object.id ?? "";
    message.folderId = object.folderId ?? "";
    message.createdAt = object.createdAt ?? undefined;
    message.name = object.name ?? "";
    message.description = object.description ?? "";
    message.labels = Object.entries(object.labels ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    message.networkId = object.networkId ?? "";
    message.status = object.status ?? 0;
    message.rules = object.rules?.map((e) => SecurityGroupRule.fromPartial(e)) || [];
    message.defaultForNetwork = object.defaultForNetwork ?? false;
    return message;
  },
};

messageTypeRegistry.set(SecurityGroup.$type, SecurityGroup);

function createBaseSecurityGroup_LabelsEntry(): SecurityGroup_LabelsEntry {
  return { $type: "yandex.cloud.vpc.v1.SecurityGroup.LabelsEntry", key: "", value: "" };
}

export const SecurityGroup_LabelsEntry = {
  $type: "yandex.cloud.vpc.v1.SecurityGroup.LabelsEntry" as const,

  encode(message: SecurityGroup_LabelsEntry, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SecurityGroup_LabelsEntry {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSecurityGroup_LabelsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SecurityGroup_LabelsEntry {
    return {
      $type: SecurityGroup_LabelsEntry.$type,
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: SecurityGroup_LabelsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SecurityGroup_LabelsEntry>, I>>(base?: I): SecurityGroup_LabelsEntry {
    return SecurityGroup_LabelsEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SecurityGroup_LabelsEntry>, I>>(object: I): SecurityGroup_LabelsEntry {
    const message = createBaseSecurityGroup_LabelsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

messageTypeRegistry.set(SecurityGroup_LabelsEntry.$type, SecurityGroup_LabelsEntry);

function createBaseSecurityGroupRule(): SecurityGroupRule {
  return {
    $type: "yandex.cloud.vpc.v1.SecurityGroupRule",
    id: "",
    description: "",
    labels: {},
    direction: 0,
    ports: undefined,
    protocolName: "",
    protocolNumber: 0,
    cidrBlocks: undefined,
    securityGroupId: undefined,
    predefinedTarget: undefined,
  };
}

export const SecurityGroupRule = {
  $type: "yandex.cloud.vpc.v1.SecurityGroupRule" as const,

  encode(message: SecurityGroupRule, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    Object.entries(message.labels).forEach(([key, value]) => {
      SecurityGroupRule_LabelsEntry.encode({
        $type: "yandex.cloud.vpc.v1.SecurityGroupRule.LabelsEntry",
        key: key as any,
        value,
      }, writer.uint32(26).fork()).ldelim();
    });
    if (message.direction !== 0) {
      writer.uint32(32).int32(message.direction);
    }
    if (message.ports !== undefined) {
      PortRange.encode(message.ports, writer.uint32(42).fork()).ldelim();
    }
    if (message.protocolName !== "") {
      writer.uint32(50).string(message.protocolName);
    }
    if (message.protocolNumber !== 0) {
      writer.uint32(56).int64(message.protocolNumber);
    }
    if (message.cidrBlocks !== undefined) {
      CidrBlocks.encode(message.cidrBlocks, writer.uint32(66).fork()).ldelim();
    }
    if (message.securityGroupId !== undefined) {
      writer.uint32(74).string(message.securityGroupId);
    }
    if (message.predefinedTarget !== undefined) {
      writer.uint32(82).string(message.predefinedTarget);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SecurityGroupRule {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSecurityGroupRule();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          const entry3 = SecurityGroupRule_LabelsEntry.decode(reader, reader.uint32());
          if (entry3.value !== undefined) {
            message.labels[entry3.key] = entry3.value;
          }
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.direction = reader.int32() as any;
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.ports = PortRange.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.protocolName = reader.string();
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.protocolNumber = longToNumber(reader.int64() as Long);
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.cidrBlocks = CidrBlocks.decode(reader, reader.uint32());
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.securityGroupId = reader.string();
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.predefinedTarget = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SecurityGroupRule {
    return {
      $type: SecurityGroupRule.$type,
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      labels: isObject(object.labels)
        ? Object.entries(object.labels).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      direction: isSet(object.direction) ? securityGroupRule_DirectionFromJSON(object.direction) : 0,
      ports: isSet(object.ports) ? PortRange.fromJSON(object.ports) : undefined,
      protocolName: isSet(object.protocolName) ? globalThis.String(object.protocolName) : "",
      protocolNumber: isSet(object.protocolNumber) ? globalThis.Number(object.protocolNumber) : 0,
      cidrBlocks: isSet(object.cidrBlocks) ? CidrBlocks.fromJSON(object.cidrBlocks) : undefined,
      securityGroupId: isSet(object.securityGroupId) ? globalThis.String(object.securityGroupId) : undefined,
      predefinedTarget: isSet(object.predefinedTarget) ? globalThis.String(object.predefinedTarget) : undefined,
    };
  },

  toJSON(message: SecurityGroupRule): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.labels) {
      const entries = Object.entries(message.labels);
      if (entries.length > 0) {
        obj.labels = {};
        entries.forEach(([k, v]) => {
          obj.labels[k] = v;
        });
      }
    }
    if (message.direction !== 0) {
      obj.direction = securityGroupRule_DirectionToJSON(message.direction);
    }
    if (message.ports !== undefined) {
      obj.ports = PortRange.toJSON(message.ports);
    }
    if (message.protocolName !== "") {
      obj.protocolName = message.protocolName;
    }
    if (message.protocolNumber !== 0) {
      obj.protocolNumber = Math.round(message.protocolNumber);
    }
    if (message.cidrBlocks !== undefined) {
      obj.cidrBlocks = CidrBlocks.toJSON(message.cidrBlocks);
    }
    if (message.securityGroupId !== undefined) {
      obj.securityGroupId = message.securityGroupId;
    }
    if (message.predefinedTarget !== undefined) {
      obj.predefinedTarget = message.predefinedTarget;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SecurityGroupRule>, I>>(base?: I): SecurityGroupRule {
    return SecurityGroupRule.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SecurityGroupRule>, I>>(object: I): SecurityGroupRule {
    const message = createBaseSecurityGroupRule();
    message.id = object.id ?? "";
    message.description = object.description ?? "";
    message.labels = Object.entries(object.labels ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    message.direction = object.direction ?? 0;
    message.ports = (object.ports !== undefined && object.ports !== null)
      ? PortRange.fromPartial(object.ports)
      : undefined;
    message.protocolName = object.protocolName ?? "";
    message.protocolNumber = object.protocolNumber ?? 0;
    message.cidrBlocks = (object.cidrBlocks !== undefined && object.cidrBlocks !== null)
      ? CidrBlocks.fromPartial(object.cidrBlocks)
      : undefined;
    message.securityGroupId = object.securityGroupId ?? undefined;
    message.predefinedTarget = object.predefinedTarget ?? undefined;
    return message;
  },
};

messageTypeRegistry.set(SecurityGroupRule.$type, SecurityGroupRule);

function createBaseSecurityGroupRule_LabelsEntry(): SecurityGroupRule_LabelsEntry {
  return { $type: "yandex.cloud.vpc.v1.SecurityGroupRule.LabelsEntry", key: "", value: "" };
}

export const SecurityGroupRule_LabelsEntry = {
  $type: "yandex.cloud.vpc.v1.SecurityGroupRule.LabelsEntry" as const,

  encode(message: SecurityGroupRule_LabelsEntry, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SecurityGroupRule_LabelsEntry {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSecurityGroupRule_LabelsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SecurityGroupRule_LabelsEntry {
    return {
      $type: SecurityGroupRule_LabelsEntry.$type,
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: SecurityGroupRule_LabelsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SecurityGroupRule_LabelsEntry>, I>>(base?: I): SecurityGroupRule_LabelsEntry {
    return SecurityGroupRule_LabelsEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SecurityGroupRule_LabelsEntry>, I>>(
    object: I,
  ): SecurityGroupRule_LabelsEntry {
    const message = createBaseSecurityGroupRule_LabelsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

messageTypeRegistry.set(SecurityGroupRule_LabelsEntry.$type, SecurityGroupRule_LabelsEntry);

function createBasePortRange(): PortRange {
  return { $type: "yandex.cloud.vpc.v1.PortRange", fromPort: 0, toPort: 0 };
}

export const PortRange = {
  $type: "yandex.cloud.vpc.v1.PortRange" as const,

  encode(message: PortRange, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.fromPort !== 0) {
      writer.uint32(8).int64(message.fromPort);
    }
    if (message.toPort !== 0) {
      writer.uint32(16).int64(message.toPort);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): PortRange {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePortRange();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.fromPort = longToNumber(reader.int64() as Long);
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.toPort = longToNumber(reader.int64() as Long);
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PortRange {
    return {
      $type: PortRange.$type,
      fromPort: isSet(object.fromPort) ? globalThis.Number(object.fromPort) : 0,
      toPort: isSet(object.toPort) ? globalThis.Number(object.toPort) : 0,
    };
  },

  toJSON(message: PortRange): unknown {
    const obj: any = {};
    if (message.fromPort !== 0) {
      obj.fromPort = Math.round(message.fromPort);
    }
    if (message.toPort !== 0) {
      obj.toPort = Math.round(message.toPort);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PortRange>, I>>(base?: I): PortRange {
    return PortRange.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PortRange>, I>>(object: I): PortRange {
    const message = createBasePortRange();
    message.fromPort = object.fromPort ?? 0;
    message.toPort = object.toPort ?? 0;
    return message;
  },
};

messageTypeRegistry.set(PortRange.$type, PortRange);

function createBaseCidrBlocks(): CidrBlocks {
  return { $type: "yandex.cloud.vpc.v1.CidrBlocks", v4CidrBlocks: [], v6CidrBlocks: [] };
}

export const CidrBlocks = {
  $type: "yandex.cloud.vpc.v1.CidrBlocks" as const,

  encode(message: CidrBlocks, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.v4CidrBlocks) {
      writer.uint32(10).string(v!);
    }
    for (const v of message.v6CidrBlocks) {
      writer.uint32(18).string(v!);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CidrBlocks {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCidrBlocks();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.v4CidrBlocks.push(reader.string());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.v6CidrBlocks.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CidrBlocks {
    return {
      $type: CidrBlocks.$type,
      v4CidrBlocks: globalThis.Array.isArray(object?.v4CidrBlocks)
        ? object.v4CidrBlocks.map((e: any) => globalThis.String(e))
        : [],
      v6CidrBlocks: globalThis.Array.isArray(object?.v6CidrBlocks)
        ? object.v6CidrBlocks.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: CidrBlocks): unknown {
    const obj: any = {};
    if (message.v4CidrBlocks?.length) {
      obj.v4CidrBlocks = message.v4CidrBlocks;
    }
    if (message.v6CidrBlocks?.length) {
      obj.v6CidrBlocks = message.v6CidrBlocks;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CidrBlocks>, I>>(base?: I): CidrBlocks {
    return CidrBlocks.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CidrBlocks>, I>>(object: I): CidrBlocks {
    const message = createBaseCidrBlocks();
    message.v4CidrBlocks = object.v4CidrBlocks?.map((e) => e) || [];
    message.v6CidrBlocks = object.v6CidrBlocks?.map((e) => e) || [];
    return message;
  },
};

messageTypeRegistry.set(CidrBlocks.$type, CidrBlocks);

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = date.getTime() / 1_000;
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { $type: "google.protobuf.Timestamp", seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function longToNumber(long: Long): number {
  if (long.gt(globalThis.Number.MAX_SAFE_INTEGER)) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  return long.toNumber();
}

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
