/* eslint-disable */
import { ChannelCredentials, Client, makeGenericClientConstructor, Metadata } from "@grpc/grpc-js";
import type {
  CallOptions,
  ClientOptions,
  ClientUnaryCall,
  handleUnaryCall,
  ServiceError,
  UntypedServiceImplementation,
} from "@grpc/grpc-js";
import { FieldMask } from "@yandex-cloud/core/dist/generated/google/protobuf/field_mask";
import { Operation } from "@yandex-cloud/core/dist/generated/yandex/cloud/operation/operation";
import Long from "long";
import _m0 from "protobufjs/minimal";
import { messageTypeRegistry } from "../../../../typeRegistry";
import { Image, Os } from "./image";

export const protobufPackage = "yandex.cloud.compute.v1";

export interface GetImageRequest {
  $type: "yandex.cloud.compute.v1.GetImageRequest";
  /**
   * ID of the Image resource to return.
   * To get the image ID, use a [ImageService.List] request.
   */
  imageId: string;
}

export interface GetImageLatestByFamilyRequest {
  $type: "yandex.cloud.compute.v1.GetImageLatestByFamilyRequest";
  /**
   * ID of the folder to get the image from.
   * To get the folder ID, use a [yandex.cloud.resourcemanager.v1.FolderService.List] request.
   */
  folderId: string;
  /** Name of the image family to search for. */
  family: string;
}

export interface ListImagesRequest {
  $type: "yandex.cloud.compute.v1.ListImagesRequest";
  /**
   * ID of the folder to list images in.
   * To get the folder ID, use a [yandex.cloud.resourcemanager.v1.FolderService.List] request.
   */
  folderId: string;
  /**
   * The maximum number of results per page to return. If the number of available
   * results is larger than [page_size],
   * the service returns a [ListImagesResponse.next_page_token]
   * that can be used to get the next page of results in subsequent list requests.
   */
  pageSize: number;
  /**
   * Page token. To get the next page of results, set [page_token] to the
   * [ListImagesResponse.next_page_token] returned by a previous list request.
   */
  pageToken: string;
  /**
   * A filter expression that filters resources listed in the response.
   * The expression consists of one or more conditions united by `AND` operator: `<condition1> [AND <condition2> [<...> AND <conditionN>]]`.
   *
   * Each condition has the form `<field> <operator> <value>`, where:
   * 1. `<field>` is the field name. Currently you can use filtering only on the limited number of fields.
   * 2. `<operator>` is a logical operator, one of `=`, `!=`, `IN`, `NOT IN`.
   * 3. `<value>` represents a value.
   * String values should be written in double (`"`) or single (`'`) quotes. C-style escape sequences are supported (`\"` turns to `"`, `\'` to `'`, `\\` to backslash).
   */
  filter: string;
  /**
   * By which column the listing should be ordered and in which direction,
   * format is "createdAt desc". "id asc" if omitted.
   * The default sorting order is ascending
   */
  orderBy: string;
}

export interface ListImagesResponse {
  $type: "yandex.cloud.compute.v1.ListImagesResponse";
  /** List of images. */
  images: Image[];
  /**
   * This token allows you to get the next page of results for list requests. If the number of results
   * is larger than [ListSnapshotsRequest.page_size], use
   * the [next_page_token] as the value
   * for the [ListSnapshotsRequest.page_token] query parameter
   * in the next list request. Each subsequent list request will have its own
   * [next_page_token] to continue paging through the results.
   */
  nextPageToken: string;
}

export interface CreateImageRequest {
  $type: "yandex.cloud.compute.v1.CreateImageRequest";
  /**
   * ID of the folder to create an image in.
   * To get the folder ID, use a [yandex.cloud.resourcemanager.v1.FolderService.List] request.
   */
  folderId: string;
  /** Name of the image. */
  name: string;
  /** Description of the image. */
  description: string;
  /** Resource labels as `key:value` pairs. */
  labels: { [key: string]: string };
  /**
   * The name of the image family to which this image belongs. For more information, see [Image family](/docs/compute/concepts/image#family).
   *
   * To get an information about the most recent image from a family, use a [ImageService.GetLatestByFamily] request.
   */
  family: string;
  /**
   * Minimum size of the disk that will be created from this image.
   * Specified in bytes. Should be more than the volume of source data.
   */
  minDiskSize: number;
  /**
   * License IDs that indicate which licenses are attached to this resource.
   * License IDs are used to calculate additional charges for the use of the virtual machine.
   *
   * The correct license ID is generated by the platform. IDs are inherited by new resources created from this resource.
   *
   * If you know the license IDs, specify them when you create the image.
   * For example, if you create a disk image using a third-party utility and load it into Object Storage, the license IDs will be lost.
   * You can specify them in this request.
   */
  productIds: string[];
  /** ID of the source image to create the new image from. */
  imageId?:
    | string
    | undefined;
  /** ID of the disk to create the image from. */
  diskId?:
    | string
    | undefined;
  /** ID of the snapshot to create the image from. */
  snapshotId?:
    | string
    | undefined;
  /**
   * URI of the source image to create the new image from.
   * Currently only supports links to images that are stored in Object Storage.
   * Currently only supports Qcow2, VMDK, and RAW formats.
   */
  uri?:
    | string
    | undefined;
  /**
   * Operating system that is contained in the image.
   *
   * If not specified and you used the `image_id` or `disk_id` field to set the source, then the value can be inherited from the source resource.
   */
  os?:
    | Os
    | undefined;
  /** When true, an image pool will be created for fast creation disks from the image. */
  pooled: boolean;
}

export interface CreateImageRequest_LabelsEntry {
  $type: "yandex.cloud.compute.v1.CreateImageRequest.LabelsEntry";
  key: string;
  value: string;
}

export interface CreateImageMetadata {
  $type: "yandex.cloud.compute.v1.CreateImageMetadata";
  /** ID of the image that is being created. */
  imageId: string;
}

export interface UpdateImageRequest {
  $type: "yandex.cloud.compute.v1.UpdateImageRequest";
  /**
   * ID of the Image resource to update.
   * To get the image ID, use a [ImageService.List] request.
   */
  imageId: string;
  /** Field mask that specifies which fields of the Image resource are going to be updated. */
  updateMask?:
    | string[]
    | undefined;
  /** Name of the image. */
  name: string;
  /** Description of the image. */
  description: string;
  /**
   * Minimum size of the disk that can be created from this image.
   * Specified in bytes. Should be more than the volume of source data and more than the virtual disk size.
   */
  minDiskSize: number;
  /**
   * Resource labels as `key:value` pairs.
   *
   * Existing set of `labels` is completely replaced by the provided set.
   */
  labels: { [key: string]: string };
}

export interface UpdateImageRequest_LabelsEntry {
  $type: "yandex.cloud.compute.v1.UpdateImageRequest.LabelsEntry";
  key: string;
  value: string;
}

export interface UpdateImageMetadata {
  $type: "yandex.cloud.compute.v1.UpdateImageMetadata";
  /** ID of the Image resource that is being updated. */
  imageId: string;
}

export interface DeleteImageRequest {
  $type: "yandex.cloud.compute.v1.DeleteImageRequest";
  /**
   * ID of the image to delete.
   * To get the image ID, use a [ImageService.List] request.
   */
  imageId: string;
}

export interface DeleteImageMetadata {
  $type: "yandex.cloud.compute.v1.DeleteImageMetadata";
  /** ID of the image that is being deleted. */
  imageId: string;
}

export interface ListImageOperationsRequest {
  $type: "yandex.cloud.compute.v1.ListImageOperationsRequest";
  /** ID of the Image resource to list operations for. */
  imageId: string;
  /**
   * The maximum number of results per page to return. If the number of available
   * results is larger than [page_size], the service returns a [ListImageOperationsResponse.next_page_token]
   * that can be used to get the next page of results in subsequent list requests.
   */
  pageSize: number;
  /**
   * Page token. To get the next page of results, set [page_token] to the
   * [ListImageOperationsResponse.next_page_token] returned by a previous list request.
   */
  pageToken: string;
}

export interface ListImageOperationsResponse {
  $type: "yandex.cloud.compute.v1.ListImageOperationsResponse";
  /** List of operations for the specified image. */
  operations: Operation[];
  /**
   * This token allows you to get the next page of results for list requests. If the number of results
   * is larger than [ListImageOperationsRequest.page_size], use the [next_page_token] as the value
   * for the [ListImageOperationsRequest.page_token] query parameter in the next list request.
   * Each subsequent list request will have its own [next_page_token] to continue paging through the results.
   */
  nextPageToken: string;
}

function createBaseGetImageRequest(): GetImageRequest {
  return { $type: "yandex.cloud.compute.v1.GetImageRequest", imageId: "" };
}

export const GetImageRequest = {
  $type: "yandex.cloud.compute.v1.GetImageRequest" as const,

  encode(message: GetImageRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.imageId !== "") {
      writer.uint32(10).string(message.imageId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetImageRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetImageRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.imageId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetImageRequest {
    return { $type: GetImageRequest.$type, imageId: isSet(object.imageId) ? globalThis.String(object.imageId) : "" };
  },

  toJSON(message: GetImageRequest): unknown {
    const obj: any = {};
    if (message.imageId !== "") {
      obj.imageId = message.imageId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetImageRequest>, I>>(base?: I): GetImageRequest {
    return GetImageRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetImageRequest>, I>>(object: I): GetImageRequest {
    const message = createBaseGetImageRequest();
    message.imageId = object.imageId ?? "";
    return message;
  },
};

messageTypeRegistry.set(GetImageRequest.$type, GetImageRequest);

function createBaseGetImageLatestByFamilyRequest(): GetImageLatestByFamilyRequest {
  return { $type: "yandex.cloud.compute.v1.GetImageLatestByFamilyRequest", folderId: "", family: "" };
}

export const GetImageLatestByFamilyRequest = {
  $type: "yandex.cloud.compute.v1.GetImageLatestByFamilyRequest" as const,

  encode(message: GetImageLatestByFamilyRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.folderId !== "") {
      writer.uint32(10).string(message.folderId);
    }
    if (message.family !== "") {
      writer.uint32(18).string(message.family);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetImageLatestByFamilyRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetImageLatestByFamilyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.folderId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.family = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetImageLatestByFamilyRequest {
    return {
      $type: GetImageLatestByFamilyRequest.$type,
      folderId: isSet(object.folderId) ? globalThis.String(object.folderId) : "",
      family: isSet(object.family) ? globalThis.String(object.family) : "",
    };
  },

  toJSON(message: GetImageLatestByFamilyRequest): unknown {
    const obj: any = {};
    if (message.folderId !== "") {
      obj.folderId = message.folderId;
    }
    if (message.family !== "") {
      obj.family = message.family;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetImageLatestByFamilyRequest>, I>>(base?: I): GetImageLatestByFamilyRequest {
    return GetImageLatestByFamilyRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetImageLatestByFamilyRequest>, I>>(
    object: I,
  ): GetImageLatestByFamilyRequest {
    const message = createBaseGetImageLatestByFamilyRequest();
    message.folderId = object.folderId ?? "";
    message.family = object.family ?? "";
    return message;
  },
};

messageTypeRegistry.set(GetImageLatestByFamilyRequest.$type, GetImageLatestByFamilyRequest);

function createBaseListImagesRequest(): ListImagesRequest {
  return {
    $type: "yandex.cloud.compute.v1.ListImagesRequest",
    folderId: "",
    pageSize: 0,
    pageToken: "",
    filter: "",
    orderBy: "",
  };
}

export const ListImagesRequest = {
  $type: "yandex.cloud.compute.v1.ListImagesRequest" as const,

  encode(message: ListImagesRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.folderId !== "") {
      writer.uint32(10).string(message.folderId);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int64(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.filter !== "") {
      writer.uint32(34).string(message.filter);
    }
    if (message.orderBy !== "") {
      writer.uint32(42).string(message.orderBy);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListImagesRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListImagesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.folderId = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = longToNumber(reader.int64() as Long);
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.orderBy = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListImagesRequest {
    return {
      $type: ListImagesRequest.$type,
      folderId: isSet(object.folderId) ? globalThis.String(object.folderId) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      orderBy: isSet(object.orderBy) ? globalThis.String(object.orderBy) : "",
    };
  },

  toJSON(message: ListImagesRequest): unknown {
    const obj: any = {};
    if (message.folderId !== "") {
      obj.folderId = message.folderId;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.orderBy !== "") {
      obj.orderBy = message.orderBy;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListImagesRequest>, I>>(base?: I): ListImagesRequest {
    return ListImagesRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListImagesRequest>, I>>(object: I): ListImagesRequest {
    const message = createBaseListImagesRequest();
    message.folderId = object.folderId ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.filter = object.filter ?? "";
    message.orderBy = object.orderBy ?? "";
    return message;
  },
};

messageTypeRegistry.set(ListImagesRequest.$type, ListImagesRequest);

function createBaseListImagesResponse(): ListImagesResponse {
  return { $type: "yandex.cloud.compute.v1.ListImagesResponse", images: [], nextPageToken: "" };
}

export const ListImagesResponse = {
  $type: "yandex.cloud.compute.v1.ListImagesResponse" as const,

  encode(message: ListImagesResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.images) {
      Image.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListImagesResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListImagesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.images.push(Image.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListImagesResponse {
    return {
      $type: ListImagesResponse.$type,
      images: globalThis.Array.isArray(object?.images) ? object.images.map((e: any) => Image.fromJSON(e)) : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListImagesResponse): unknown {
    const obj: any = {};
    if (message.images?.length) {
      obj.images = message.images.map((e) => Image.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListImagesResponse>, I>>(base?: I): ListImagesResponse {
    return ListImagesResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListImagesResponse>, I>>(object: I): ListImagesResponse {
    const message = createBaseListImagesResponse();
    message.images = object.images?.map((e) => Image.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

messageTypeRegistry.set(ListImagesResponse.$type, ListImagesResponse);

function createBaseCreateImageRequest(): CreateImageRequest {
  return {
    $type: "yandex.cloud.compute.v1.CreateImageRequest",
    folderId: "",
    name: "",
    description: "",
    labels: {},
    family: "",
    minDiskSize: 0,
    productIds: [],
    imageId: undefined,
    diskId: undefined,
    snapshotId: undefined,
    uri: undefined,
    os: undefined,
    pooled: false,
  };
}

export const CreateImageRequest = {
  $type: "yandex.cloud.compute.v1.CreateImageRequest" as const,

  encode(message: CreateImageRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.folderId !== "") {
      writer.uint32(10).string(message.folderId);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.description !== "") {
      writer.uint32(26).string(message.description);
    }
    Object.entries(message.labels).forEach(([key, value]) => {
      CreateImageRequest_LabelsEntry.encode({
        $type: "yandex.cloud.compute.v1.CreateImageRequest.LabelsEntry",
        key: key as any,
        value,
      }, writer.uint32(34).fork()).ldelim();
    });
    if (message.family !== "") {
      writer.uint32(42).string(message.family);
    }
    if (message.minDiskSize !== 0) {
      writer.uint32(48).int64(message.minDiskSize);
    }
    for (const v of message.productIds) {
      writer.uint32(58).string(v!);
    }
    if (message.imageId !== undefined) {
      writer.uint32(66).string(message.imageId);
    }
    if (message.diskId !== undefined) {
      writer.uint32(74).string(message.diskId);
    }
    if (message.snapshotId !== undefined) {
      writer.uint32(82).string(message.snapshotId);
    }
    if (message.uri !== undefined) {
      writer.uint32(90).string(message.uri);
    }
    if (message.os !== undefined) {
      Os.encode(message.os, writer.uint32(98).fork()).ldelim();
    }
    if (message.pooled === true) {
      writer.uint32(136).bool(message.pooled);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CreateImageRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateImageRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.folderId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          const entry4 = CreateImageRequest_LabelsEntry.decode(reader, reader.uint32());
          if (entry4.value !== undefined) {
            message.labels[entry4.key] = entry4.value;
          }
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.family = reader.string();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.minDiskSize = longToNumber(reader.int64() as Long);
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.productIds.push(reader.string());
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.imageId = reader.string();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.diskId = reader.string();
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.snapshotId = reader.string();
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.uri = reader.string();
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.os = Os.decode(reader, reader.uint32());
          continue;
        case 17:
          if (tag !== 136) {
            break;
          }

          message.pooled = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateImageRequest {
    return {
      $type: CreateImageRequest.$type,
      folderId: isSet(object.folderId) ? globalThis.String(object.folderId) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      labels: isObject(object.labels)
        ? Object.entries(object.labels).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      family: isSet(object.family) ? globalThis.String(object.family) : "",
      minDiskSize: isSet(object.minDiskSize) ? globalThis.Number(object.minDiskSize) : 0,
      productIds: globalThis.Array.isArray(object?.productIds)
        ? object.productIds.map((e: any) => globalThis.String(e))
        : [],
      imageId: isSet(object.imageId) ? globalThis.String(object.imageId) : undefined,
      diskId: isSet(object.diskId) ? globalThis.String(object.diskId) : undefined,
      snapshotId: isSet(object.snapshotId) ? globalThis.String(object.snapshotId) : undefined,
      uri: isSet(object.uri) ? globalThis.String(object.uri) : undefined,
      os: isSet(object.os) ? Os.fromJSON(object.os) : undefined,
      pooled: isSet(object.pooled) ? globalThis.Boolean(object.pooled) : false,
    };
  },

  toJSON(message: CreateImageRequest): unknown {
    const obj: any = {};
    if (message.folderId !== "") {
      obj.folderId = message.folderId;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.labels) {
      const entries = Object.entries(message.labels);
      if (entries.length > 0) {
        obj.labels = {};
        entries.forEach(([k, v]) => {
          obj.labels[k] = v;
        });
      }
    }
    if (message.family !== "") {
      obj.family = message.family;
    }
    if (message.minDiskSize !== 0) {
      obj.minDiskSize = Math.round(message.minDiskSize);
    }
    if (message.productIds?.length) {
      obj.productIds = message.productIds;
    }
    if (message.imageId !== undefined) {
      obj.imageId = message.imageId;
    }
    if (message.diskId !== undefined) {
      obj.diskId = message.diskId;
    }
    if (message.snapshotId !== undefined) {
      obj.snapshotId = message.snapshotId;
    }
    if (message.uri !== undefined) {
      obj.uri = message.uri;
    }
    if (message.os !== undefined) {
      obj.os = Os.toJSON(message.os);
    }
    if (message.pooled === true) {
      obj.pooled = message.pooled;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateImageRequest>, I>>(base?: I): CreateImageRequest {
    return CreateImageRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateImageRequest>, I>>(object: I): CreateImageRequest {
    const message = createBaseCreateImageRequest();
    message.folderId = object.folderId ?? "";
    message.name = object.name ?? "";
    message.description = object.description ?? "";
    message.labels = Object.entries(object.labels ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    message.family = object.family ?? "";
    message.minDiskSize = object.minDiskSize ?? 0;
    message.productIds = object.productIds?.map((e) => e) || [];
    message.imageId = object.imageId ?? undefined;
    message.diskId = object.diskId ?? undefined;
    message.snapshotId = object.snapshotId ?? undefined;
    message.uri = object.uri ?? undefined;
    message.os = (object.os !== undefined && object.os !== null) ? Os.fromPartial(object.os) : undefined;
    message.pooled = object.pooled ?? false;
    return message;
  },
};

messageTypeRegistry.set(CreateImageRequest.$type, CreateImageRequest);

function createBaseCreateImageRequest_LabelsEntry(): CreateImageRequest_LabelsEntry {
  return { $type: "yandex.cloud.compute.v1.CreateImageRequest.LabelsEntry", key: "", value: "" };
}

export const CreateImageRequest_LabelsEntry = {
  $type: "yandex.cloud.compute.v1.CreateImageRequest.LabelsEntry" as const,

  encode(message: CreateImageRequest_LabelsEntry, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CreateImageRequest_LabelsEntry {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateImageRequest_LabelsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateImageRequest_LabelsEntry {
    return {
      $type: CreateImageRequest_LabelsEntry.$type,
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: CreateImageRequest_LabelsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateImageRequest_LabelsEntry>, I>>(base?: I): CreateImageRequest_LabelsEntry {
    return CreateImageRequest_LabelsEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateImageRequest_LabelsEntry>, I>>(
    object: I,
  ): CreateImageRequest_LabelsEntry {
    const message = createBaseCreateImageRequest_LabelsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

messageTypeRegistry.set(CreateImageRequest_LabelsEntry.$type, CreateImageRequest_LabelsEntry);

function createBaseCreateImageMetadata(): CreateImageMetadata {
  return { $type: "yandex.cloud.compute.v1.CreateImageMetadata", imageId: "" };
}

export const CreateImageMetadata = {
  $type: "yandex.cloud.compute.v1.CreateImageMetadata" as const,

  encode(message: CreateImageMetadata, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.imageId !== "") {
      writer.uint32(10).string(message.imageId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CreateImageMetadata {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateImageMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.imageId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateImageMetadata {
    return {
      $type: CreateImageMetadata.$type,
      imageId: isSet(object.imageId) ? globalThis.String(object.imageId) : "",
    };
  },

  toJSON(message: CreateImageMetadata): unknown {
    const obj: any = {};
    if (message.imageId !== "") {
      obj.imageId = message.imageId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateImageMetadata>, I>>(base?: I): CreateImageMetadata {
    return CreateImageMetadata.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateImageMetadata>, I>>(object: I): CreateImageMetadata {
    const message = createBaseCreateImageMetadata();
    message.imageId = object.imageId ?? "";
    return message;
  },
};

messageTypeRegistry.set(CreateImageMetadata.$type, CreateImageMetadata);

function createBaseUpdateImageRequest(): UpdateImageRequest {
  return {
    $type: "yandex.cloud.compute.v1.UpdateImageRequest",
    imageId: "",
    updateMask: undefined,
    name: "",
    description: "",
    minDiskSize: 0,
    labels: {},
  };
}

export const UpdateImageRequest = {
  $type: "yandex.cloud.compute.v1.UpdateImageRequest" as const,

  encode(message: UpdateImageRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.imageId !== "") {
      writer.uint32(10).string(message.imageId);
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).ldelim();
    }
    if (message.name !== "") {
      writer.uint32(26).string(message.name);
    }
    if (message.description !== "") {
      writer.uint32(34).string(message.description);
    }
    if (message.minDiskSize !== 0) {
      writer.uint32(40).int64(message.minDiskSize);
    }
    Object.entries(message.labels).forEach(([key, value]) => {
      UpdateImageRequest_LabelsEntry.encode({
        $type: "yandex.cloud.compute.v1.UpdateImageRequest.LabelsEntry",
        key: key as any,
        value,
      }, writer.uint32(50).fork()).ldelim();
    });
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateImageRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateImageRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.imageId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.name = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.description = reader.string();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.minDiskSize = longToNumber(reader.int64() as Long);
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          const entry6 = UpdateImageRequest_LabelsEntry.decode(reader, reader.uint32());
          if (entry6.value !== undefined) {
            message.labels[entry6.key] = entry6.value;
          }
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateImageRequest {
    return {
      $type: UpdateImageRequest.$type,
      imageId: isSet(object.imageId) ? globalThis.String(object.imageId) : "",
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      minDiskSize: isSet(object.minDiskSize) ? globalThis.Number(object.minDiskSize) : 0,
      labels: isObject(object.labels)
        ? Object.entries(object.labels).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: UpdateImageRequest): unknown {
    const obj: any = {};
    if (message.imageId !== "") {
      obj.imageId = message.imageId;
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.minDiskSize !== 0) {
      obj.minDiskSize = Math.round(message.minDiskSize);
    }
    if (message.labels) {
      const entries = Object.entries(message.labels);
      if (entries.length > 0) {
        obj.labels = {};
        entries.forEach(([k, v]) => {
          obj.labels[k] = v;
        });
      }
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateImageRequest>, I>>(base?: I): UpdateImageRequest {
    return UpdateImageRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateImageRequest>, I>>(object: I): UpdateImageRequest {
    const message = createBaseUpdateImageRequest();
    message.imageId = object.imageId ?? "";
    message.updateMask = object.updateMask ?? undefined;
    message.name = object.name ?? "";
    message.description = object.description ?? "";
    message.minDiskSize = object.minDiskSize ?? 0;
    message.labels = Object.entries(object.labels ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    return message;
  },
};

messageTypeRegistry.set(UpdateImageRequest.$type, UpdateImageRequest);

function createBaseUpdateImageRequest_LabelsEntry(): UpdateImageRequest_LabelsEntry {
  return { $type: "yandex.cloud.compute.v1.UpdateImageRequest.LabelsEntry", key: "", value: "" };
}

export const UpdateImageRequest_LabelsEntry = {
  $type: "yandex.cloud.compute.v1.UpdateImageRequest.LabelsEntry" as const,

  encode(message: UpdateImageRequest_LabelsEntry, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateImageRequest_LabelsEntry {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateImageRequest_LabelsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateImageRequest_LabelsEntry {
    return {
      $type: UpdateImageRequest_LabelsEntry.$type,
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: UpdateImageRequest_LabelsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateImageRequest_LabelsEntry>, I>>(base?: I): UpdateImageRequest_LabelsEntry {
    return UpdateImageRequest_LabelsEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateImageRequest_LabelsEntry>, I>>(
    object: I,
  ): UpdateImageRequest_LabelsEntry {
    const message = createBaseUpdateImageRequest_LabelsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

messageTypeRegistry.set(UpdateImageRequest_LabelsEntry.$type, UpdateImageRequest_LabelsEntry);

function createBaseUpdateImageMetadata(): UpdateImageMetadata {
  return { $type: "yandex.cloud.compute.v1.UpdateImageMetadata", imageId: "" };
}

export const UpdateImageMetadata = {
  $type: "yandex.cloud.compute.v1.UpdateImageMetadata" as const,

  encode(message: UpdateImageMetadata, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.imageId !== "") {
      writer.uint32(10).string(message.imageId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateImageMetadata {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateImageMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.imageId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateImageMetadata {
    return {
      $type: UpdateImageMetadata.$type,
      imageId: isSet(object.imageId) ? globalThis.String(object.imageId) : "",
    };
  },

  toJSON(message: UpdateImageMetadata): unknown {
    const obj: any = {};
    if (message.imageId !== "") {
      obj.imageId = message.imageId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateImageMetadata>, I>>(base?: I): UpdateImageMetadata {
    return UpdateImageMetadata.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateImageMetadata>, I>>(object: I): UpdateImageMetadata {
    const message = createBaseUpdateImageMetadata();
    message.imageId = object.imageId ?? "";
    return message;
  },
};

messageTypeRegistry.set(UpdateImageMetadata.$type, UpdateImageMetadata);

function createBaseDeleteImageRequest(): DeleteImageRequest {
  return { $type: "yandex.cloud.compute.v1.DeleteImageRequest", imageId: "" };
}

export const DeleteImageRequest = {
  $type: "yandex.cloud.compute.v1.DeleteImageRequest" as const,

  encode(message: DeleteImageRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.imageId !== "") {
      writer.uint32(10).string(message.imageId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DeleteImageRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteImageRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.imageId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteImageRequest {
    return { $type: DeleteImageRequest.$type, imageId: isSet(object.imageId) ? globalThis.String(object.imageId) : "" };
  },

  toJSON(message: DeleteImageRequest): unknown {
    const obj: any = {};
    if (message.imageId !== "") {
      obj.imageId = message.imageId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteImageRequest>, I>>(base?: I): DeleteImageRequest {
    return DeleteImageRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteImageRequest>, I>>(object: I): DeleteImageRequest {
    const message = createBaseDeleteImageRequest();
    message.imageId = object.imageId ?? "";
    return message;
  },
};

messageTypeRegistry.set(DeleteImageRequest.$type, DeleteImageRequest);

function createBaseDeleteImageMetadata(): DeleteImageMetadata {
  return { $type: "yandex.cloud.compute.v1.DeleteImageMetadata", imageId: "" };
}

export const DeleteImageMetadata = {
  $type: "yandex.cloud.compute.v1.DeleteImageMetadata" as const,

  encode(message: DeleteImageMetadata, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.imageId !== "") {
      writer.uint32(10).string(message.imageId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DeleteImageMetadata {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteImageMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.imageId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteImageMetadata {
    return {
      $type: DeleteImageMetadata.$type,
      imageId: isSet(object.imageId) ? globalThis.String(object.imageId) : "",
    };
  },

  toJSON(message: DeleteImageMetadata): unknown {
    const obj: any = {};
    if (message.imageId !== "") {
      obj.imageId = message.imageId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteImageMetadata>, I>>(base?: I): DeleteImageMetadata {
    return DeleteImageMetadata.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteImageMetadata>, I>>(object: I): DeleteImageMetadata {
    const message = createBaseDeleteImageMetadata();
    message.imageId = object.imageId ?? "";
    return message;
  },
};

messageTypeRegistry.set(DeleteImageMetadata.$type, DeleteImageMetadata);

function createBaseListImageOperationsRequest(): ListImageOperationsRequest {
  return { $type: "yandex.cloud.compute.v1.ListImageOperationsRequest", imageId: "", pageSize: 0, pageToken: "" };
}

export const ListImageOperationsRequest = {
  $type: "yandex.cloud.compute.v1.ListImageOperationsRequest" as const,

  encode(message: ListImageOperationsRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.imageId !== "") {
      writer.uint32(10).string(message.imageId);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int64(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListImageOperationsRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListImageOperationsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.imageId = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.pageSize = longToNumber(reader.int64() as Long);
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListImageOperationsRequest {
    return {
      $type: ListImageOperationsRequest.$type,
      imageId: isSet(object.imageId) ? globalThis.String(object.imageId) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: ListImageOperationsRequest): unknown {
    const obj: any = {};
    if (message.imageId !== "") {
      obj.imageId = message.imageId;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListImageOperationsRequest>, I>>(base?: I): ListImageOperationsRequest {
    return ListImageOperationsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListImageOperationsRequest>, I>>(object: I): ListImageOperationsRequest {
    const message = createBaseListImageOperationsRequest();
    message.imageId = object.imageId ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

messageTypeRegistry.set(ListImageOperationsRequest.$type, ListImageOperationsRequest);

function createBaseListImageOperationsResponse(): ListImageOperationsResponse {
  return { $type: "yandex.cloud.compute.v1.ListImageOperationsResponse", operations: [], nextPageToken: "" };
}

export const ListImageOperationsResponse = {
  $type: "yandex.cloud.compute.v1.ListImageOperationsResponse" as const,

  encode(message: ListImageOperationsResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.operations) {
      Operation.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListImageOperationsResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListImageOperationsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.operations.push(Operation.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListImageOperationsResponse {
    return {
      $type: ListImageOperationsResponse.$type,
      operations: globalThis.Array.isArray(object?.operations)
        ? object.operations.map((e: any) => Operation.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListImageOperationsResponse): unknown {
    const obj: any = {};
    if (message.operations?.length) {
      obj.operations = message.operations.map((e) => Operation.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListImageOperationsResponse>, I>>(base?: I): ListImageOperationsResponse {
    return ListImageOperationsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListImageOperationsResponse>, I>>(object: I): ListImageOperationsResponse {
    const message = createBaseListImageOperationsResponse();
    message.operations = object.operations?.map((e) => Operation.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

messageTypeRegistry.set(ListImageOperationsResponse.$type, ListImageOperationsResponse);

/** A set of methods for managing Image resources. */
export type ImageServiceService = typeof ImageServiceService;
export const ImageServiceService = {
  /**
   * Returns the specified Image resource.
   *
   * To get the list of available Image resources, make a [List] request.
   */
  get: {
    path: "/yandex.cloud.compute.v1.ImageService/Get",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetImageRequest) => Buffer.from(GetImageRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => GetImageRequest.decode(value),
    responseSerialize: (value: Image) => Buffer.from(Image.encode(value).finish()),
    responseDeserialize: (value: Buffer) => Image.decode(value),
  },
  /** Returns the latest image that is part of an image family. */
  getLatestByFamily: {
    path: "/yandex.cloud.compute.v1.ImageService/GetLatestByFamily",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetImageLatestByFamilyRequest) =>
      Buffer.from(GetImageLatestByFamilyRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => GetImageLatestByFamilyRequest.decode(value),
    responseSerialize: (value: Image) => Buffer.from(Image.encode(value).finish()),
    responseDeserialize: (value: Buffer) => Image.decode(value),
  },
  /** Retrieves the list of Image resources in the specified folder. */
  list: {
    path: "/yandex.cloud.compute.v1.ImageService/List",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ListImagesRequest) => Buffer.from(ListImagesRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => ListImagesRequest.decode(value),
    responseSerialize: (value: ListImagesResponse) => Buffer.from(ListImagesResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => ListImagesResponse.decode(value),
  },
  /**
   * Creates an image in the specified folder.
   *
   * You can create an image from a disk, snapshot, other image or URI.
   * Method starts an asynchronous operation that can be cancelled while it is in progress.
   */
  create: {
    path: "/yandex.cloud.compute.v1.ImageService/Create",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: CreateImageRequest) => Buffer.from(CreateImageRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => CreateImageRequest.decode(value),
    responseSerialize: (value: Operation) => Buffer.from(Operation.encode(value).finish()),
    responseDeserialize: (value: Buffer) => Operation.decode(value),
  },
  /** Updates the specified image. */
  update: {
    path: "/yandex.cloud.compute.v1.ImageService/Update",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: UpdateImageRequest) => Buffer.from(UpdateImageRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => UpdateImageRequest.decode(value),
    responseSerialize: (value: Operation) => Buffer.from(Operation.encode(value).finish()),
    responseDeserialize: (value: Buffer) => Operation.decode(value),
  },
  /**
   * Deletes the specified image.
   *
   * Deleting an image removes its data permanently and is irreversible.
   */
  delete: {
    path: "/yandex.cloud.compute.v1.ImageService/Delete",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: DeleteImageRequest) => Buffer.from(DeleteImageRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => DeleteImageRequest.decode(value),
    responseSerialize: (value: Operation) => Buffer.from(Operation.encode(value).finish()),
    responseDeserialize: (value: Buffer) => Operation.decode(value),
  },
  /** Lists operations for the specified image. */
  listOperations: {
    path: "/yandex.cloud.compute.v1.ImageService/ListOperations",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ListImageOperationsRequest) =>
      Buffer.from(ListImageOperationsRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => ListImageOperationsRequest.decode(value),
    responseSerialize: (value: ListImageOperationsResponse) =>
      Buffer.from(ListImageOperationsResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => ListImageOperationsResponse.decode(value),
  },
} as const;

export interface ImageServiceServer extends UntypedServiceImplementation {
  /**
   * Returns the specified Image resource.
   *
   * To get the list of available Image resources, make a [List] request.
   */
  get: handleUnaryCall<GetImageRequest, Image>;
  /** Returns the latest image that is part of an image family. */
  getLatestByFamily: handleUnaryCall<GetImageLatestByFamilyRequest, Image>;
  /** Retrieves the list of Image resources in the specified folder. */
  list: handleUnaryCall<ListImagesRequest, ListImagesResponse>;
  /**
   * Creates an image in the specified folder.
   *
   * You can create an image from a disk, snapshot, other image or URI.
   * Method starts an asynchronous operation that can be cancelled while it is in progress.
   */
  create: handleUnaryCall<CreateImageRequest, Operation>;
  /** Updates the specified image. */
  update: handleUnaryCall<UpdateImageRequest, Operation>;
  /**
   * Deletes the specified image.
   *
   * Deleting an image removes its data permanently and is irreversible.
   */
  delete: handleUnaryCall<DeleteImageRequest, Operation>;
  /** Lists operations for the specified image. */
  listOperations: handleUnaryCall<ListImageOperationsRequest, ListImageOperationsResponse>;
}

export interface ImageServiceClient extends Client {
  /**
   * Returns the specified Image resource.
   *
   * To get the list of available Image resources, make a [List] request.
   */
  get(request: GetImageRequest, callback: (error: ServiceError | null, response: Image) => void): ClientUnaryCall;
  get(
    request: GetImageRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: Image) => void,
  ): ClientUnaryCall;
  get(
    request: GetImageRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: Image) => void,
  ): ClientUnaryCall;
  /** Returns the latest image that is part of an image family. */
  getLatestByFamily(
    request: GetImageLatestByFamilyRequest,
    callback: (error: ServiceError | null, response: Image) => void,
  ): ClientUnaryCall;
  getLatestByFamily(
    request: GetImageLatestByFamilyRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: Image) => void,
  ): ClientUnaryCall;
  getLatestByFamily(
    request: GetImageLatestByFamilyRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: Image) => void,
  ): ClientUnaryCall;
  /** Retrieves the list of Image resources in the specified folder. */
  list(
    request: ListImagesRequest,
    callback: (error: ServiceError | null, response: ListImagesResponse) => void,
  ): ClientUnaryCall;
  list(
    request: ListImagesRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: ListImagesResponse) => void,
  ): ClientUnaryCall;
  list(
    request: ListImagesRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: ListImagesResponse) => void,
  ): ClientUnaryCall;
  /**
   * Creates an image in the specified folder.
   *
   * You can create an image from a disk, snapshot, other image or URI.
   * Method starts an asynchronous operation that can be cancelled while it is in progress.
   */
  create(
    request: CreateImageRequest,
    callback: (error: ServiceError | null, response: Operation) => void,
  ): ClientUnaryCall;
  create(
    request: CreateImageRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: Operation) => void,
  ): ClientUnaryCall;
  create(
    request: CreateImageRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: Operation) => void,
  ): ClientUnaryCall;
  /** Updates the specified image. */
  update(
    request: UpdateImageRequest,
    callback: (error: ServiceError | null, response: Operation) => void,
  ): ClientUnaryCall;
  update(
    request: UpdateImageRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: Operation) => void,
  ): ClientUnaryCall;
  update(
    request: UpdateImageRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: Operation) => void,
  ): ClientUnaryCall;
  /**
   * Deletes the specified image.
   *
   * Deleting an image removes its data permanently and is irreversible.
   */
  delete(
    request: DeleteImageRequest,
    callback: (error: ServiceError | null, response: Operation) => void,
  ): ClientUnaryCall;
  delete(
    request: DeleteImageRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: Operation) => void,
  ): ClientUnaryCall;
  delete(
    request: DeleteImageRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: Operation) => void,
  ): ClientUnaryCall;
  /** Lists operations for the specified image. */
  listOperations(
    request: ListImageOperationsRequest,
    callback: (error: ServiceError | null, response: ListImageOperationsResponse) => void,
  ): ClientUnaryCall;
  listOperations(
    request: ListImageOperationsRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: ListImageOperationsResponse) => void,
  ): ClientUnaryCall;
  listOperations(
    request: ListImageOperationsRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: ListImageOperationsResponse) => void,
  ): ClientUnaryCall;
}

export const ImageServiceClient = makeGenericClientConstructor(
  ImageServiceService,
  "yandex.cloud.compute.v1.ImageService",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): ImageServiceClient;
  service: typeof ImageServiceService;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in Exclude<keyof T, "$type">]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P> | "$type">]: never };

function longToNumber(long: Long): number {
  if (long.gt(globalThis.Number.MAX_SAFE_INTEGER)) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  return long.toNumber();
}

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
